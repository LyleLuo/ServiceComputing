	// 设置数据写到哪里
	if len(page.PrintDest) > 0 {
		cmd := exec.Command("lp", "-d"+page.PrintDest)
		stdinPipe, err := cmd.StdinPipe()
		if err != nil {
			return errPipe
		}
		defer stdinPipe.Close()
		cmd.Stderr = os.Stderr
		cmd.Stdout = os.Stdout
		if err := cmd.Start(); err != nil {
			return err
		}
		write = bufio.NewWriter(stdinPipe)
	} else {
		write = bufio.NewWriter(os.Stdout)
	}
	defer write.Flush()

	lines, pages := 1, 1

	if page.PageType {
		for {
			ch, err := read.ReadByte()
			if err == io.EOF {
				break
			} else if err != nil {
				return err
			}
			if ch == '\f' {
				pages++
			}
			if page.StartPage <= pages && pages <= page.EndPage {
				if err := write.WriteByte(ch); err != nil {
					return err
				}
			}
		}
	} else {
		for {
			cstream, err := read.ReadBytes('\n')
			if err == io.EOF {
				if page.StartPage <= pages && pages <= page.EndPage {
					if _, err := write.Write(cstream); err != nil {
						return err
					}
				}
				break
			} else if err != nil {
				return err
			}

			if lines > page.PageLen {
				pages++
				lines = 1
			}
			if page.StartPage <= pages && pages <= page.EndPage {
				if _, err := write.Write(cstream); err != nil {
					return err
				}
			}
			lines++
		}
	}
	return nil
}

// Selpg 是 select page 程序
func Selpg(page *Page) {
	if page == nil {
		page = new(Page)
		perror(pargs(page))
		perror(pinput(page))
	} else {
		perror(pinput(page))
	}
}
package myselpg

import (
	"bufio"
	"errors"
	"fmt"
	"io"
	"os"
	"os/exec"

	"github.com/spf13/pflag"
)

// Page 是selpg的命令行参数结构体
type Page struct {
	StartPage  int
	EndPage    int
	InFileName string
	PageLen    int
	PageType   bool
	PrintDest  string
}

var errPageNotPos = errors.New("start page and end page should be positive")
var errPageStartGreater = errors.New("end page should be greater then start page")
var errTooManyArgs = errors.New("there are too many arguments")
var errFile = errors.New("cannot open your input file")
var errPipe = errors.New("cannot open pipe")

func perror(err error) {
	if err != nil {
		if _, err2 := fmt.Fprintln(os.Stderr, err); err2 != nil {
			panic(err2)
